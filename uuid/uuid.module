<?php
// $Id: uuid.module,v 1.1.2.13 2010/09/08 16:07:14 recidive Exp $

/**
 * @file
 * Main module functions for the uuid module.
 */

/**
 * Implementation of hook_menu().
 */
function uuid_menu() {
  $items = array();

  $items['admin/settings/uuid'] = array(
    'title' => 'Universally Unique IDentifier',
    'description' => 'Configure automatically UUID generation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uuid_admin'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uuid.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function uuid_nodeapi(&$node, $op, $teaser, $page) {
  $automatic_types = variable_get('uuid_automatic_for_nodes', array());

  switch ($op) {
    case 'load':
      return array(
        'uuid' => db_result(db_query('SELECT uuid FROM {uuid_node} WHERE nid = %d', $node->nid)),
        'revision_uuid' => db_result(db_query('SELECT uuid FROM {uuid_node_revisions} WHERE vid = %d', $node->vid))
      );
    case 'insert':
      // Handle the case where automatic UUID generation is turned OFF but a
      // node is created, node_save(), intentionally with the $node->uuid
      // attribute.
      if (isset($node->uuid) && uuid_is_valid($node->uuid)) {
        db_query("INSERT INTO {uuid_node} (nid, uuid) VALUES (%d, '%s')", $node->nid, $node->uuid);

        if (isset($node->revision_uuid) && uuid_is_valid($node->revision_uuid)) {
          db_query("INSERT INTO {uuid_node_revisions} (vid, uuid) VALUES (%d, '%s')", $node->vid, $node->revision_uuid);
        }
        else {
          db_query("INSERT INTO {uuid_node_revisions} (vid, uuid) VALUES (%d, '%s')", $node->vid, uuid_uuid());
        }
      }
      else if (in_array($node->type, $automatic_types)) {
        db_query("INSERT INTO {uuid_node} (nid, uuid) VALUES (%d, '%s')", $node->nid, uuid_uuid());
        db_query("INSERT INTO {uuid_node_revisions} (vid, uuid) VALUES (%d, '%s')", $node->vid, uuid_uuid());
      }
      break;
    case 'update':
      if (isset($node->revision)) {
        if (isset($node->revision_uuid) && uuid_is_valid($node->revision_uuid)) {
          db_query("INSERT INTO {uuid_node_revisions} (vid, uuid) VALUES (%d, '%s')", $node->vid, $node->revision_uuid);
        }
        else {
          db_query("INSERT INTO {uuid_node_revisions} (vid, uuid) VALUES (%d, '%s')", $node->vid, uuid_uuid());
        }
      }
      break;
    case 'delete':
      db_query('DELETE FROM {uuid_node} WHERE nid = %d', $node->nid);
      break;
    case 'delete revision':
      db_query('DELETE FROM {uuid_node_revisions} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Returns the node associated with a UUID. Uses db_rewrite_sql() to ensure
 * node_access rules are preserved.
 *
 * @return
 *   Either the $node object, or FALSE on failure.
 */
function node_get_by_uuid($uuid) {
  $nid = db_result(db_query(db_rewrite_sql(
    "SELECT n.nid
     FROM {node} AS n
     INNER JOIN {uuid_node} AS un ON n.nid = un.nid
     WHERE un.uuid = '%s'"),
    $uuid
  ));

  if ($nid) {
    return node_load($nid);
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the node associated with a revision UUID.
 *
 * @return
 *   Either the $node object, or FALSE on failure.
 */
function node_get_by_revision_uuid($revision_uuid) {
  $node = db_fetch_object(db_query(db_rewrite_sql(
    "SELECT n.nid, n.vid
     FROM {node} AS n
     INNER JOIN {uuid_node_revisions} AS unr ON n.vid = unr.vid
     WHERE unr.uuid = '%s'"),
    $revision_uuid
  ));

  if ($node->nid && $node->vid) {
    return node_load($node->nid, $node->vid);
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_user().
 */
function uuid_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'load':
      $user->uuid = db_result(db_query('SELECT uuid FROM {uuid_users} WHERE uid = %d', $user->uid));
      break;
    case 'insert':
      if (isset($user->uuid) && uuid_is_valid($user->uuid)) {
        db_query("INSERT INTO {uuid_users} (uid, uuid) VALUES (%d, '%s')", $user->uid, $user->uuid);
      }
      else if (variable_get('uuid_automatic_for_users', FALSE)) {
        db_query("INSERT INTO {uuid_users} (uid, uuid) VALUES (%d, '%s')", $user->uid, uuid_uuid());
      }
      break;
    case 'update':
      if (isset($user->uuid) && uuid_is_valid($user->uuid)) {
        $exists = db_result(db_query('SELECT 1 FROM {uuid_users} WHERE uid = %d', $user->uid));

        if (!$exists) {
          db_query("INSERT INTO {uuid_users} (uid, uuid) VALUES (%d, '%s')", $user->uid, $user->uuid);
        }
      }
      break;
    case 'delete':
      db_query('DELETE FROM {uuid_users} WHERE uid = %d', $node->uid);
      break;
  }
}

/**
 * Returns the user associated with a UUID.
 *
 * @return
 *   Either the $account object, or FALSE on failure.
 */
function user_get_by_uuid($uuid) {
  $uid = db_result(db_query("SELECT uid FROM {uuid_users} WHERE uuid = '%s'", $uuid));

  if ($uid) {
    return user_load(array('uid' => $uid));
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function uuid_taxonomy($op, $type, $array = NULL) {
  $types = array(
    'term' => array(
      'table' => 'uuid_term_data',
      'field' => 'tid',
    ),
    'vocabulary' => array(
      'table' => 'uuid_vocabulary',
      'field' => 'vid',
    ),
  );
  
  if (array_key_exists($type, $types) && in_array($array['vid'], variable_get('uuid_automatic_for_taxonomy', array()))) {
    $field = $types[$type]['field'];
    switch ($op) {
      case 'insert':
        if (empty($array['uuid']) || !uuid_is_valid($array['uuid'])) {
          $array['uuid'] = uuid_uuid();
        }
        db_query("INSERT INTO {" . $types[$type]['table'] . "} ($field, uuid) VALUES (%d, '%s')",
          $array[$types[$type]['field']], $array['uuid']);
        break;
      case 'delete':
        db_query("DELETE FROM {". $types[$type]['table'] ."} WHERE $field = %d", $array[$types[$type]['field']]);
        break;
    }
  }
}


/**
 * Implementation of hook_comment().
 */
function uuid_comment(&$a1, $op) {
  switch ($op) {
    // Make sure that a new entry gets made in the comments_uuid table when new content
    // is   if (array_key_exists($type, $types) && in_array($array['vid'], variable_get('uuid_automatic_for_taxonomy', array()))) {

    $field = $types[$type]['field'];
    switch ($op) {
      case 'insert':
        if (empty($array['uuid']) || !uuid_is_valid($array['uuid'])) {
          $array['uuid'] = uuid_uuid();
        }
        db_query("INSERT INTO {" . $types[$type]['table'] . "} ($field, uuid) VALUES (%d, '%s')",
          $array[$types[$type]['field']], $array['uuid']);

        break;
      case 'delete':
        db_query("DELETE FROM {". $types[$type]['table'] ."} WHERE $field = %d", $array[$types[$type]['field']]);
        break;
    }
'];

    switch ($op) {
      case 'insert':
        if (empty($array['uuid']) || !uuid_is_valid($array['uuid'])) {
          $array['uuid'] = uuid_uuid();
        }
        db_query("INSERT INTO {" . $types[$type]['table'] . "} ($field, uuid) VALUES (%d, '%s')",
          $array[$types[$type]['field']], $array['uuid']);

        break;
      case 'delete':
        db_query("DELETE FROM {". $types[$type]['table'] ."} WHERE $field = %d", $array[$types[$type]['field']]);
        break;
    }
  }
}


